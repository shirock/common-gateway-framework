#summary CommonGateway 與 CodeIgniter 的對照
#labels Featured,Phase-Implementation

CommonGateway 當初在設計時，除了 RoR 外，主要的 PHP 參考對象就是 [http://www.codeigniter.org.tw/ CodeIgniter] 。
這裡列出兩者間的一些異同。

= 目錄規劃 =

CI 分成 system/*, application/* 兩類。
CG 不分，只有一層。

CI:
{{{
application/controllers
application/models
application/views
application/helpers
system/libraries
}}}

CG:
{{{
controllers
views
helpers
}}}

TODO:

CG 目前還不處理 models 與 libraries 。

= Controller =

接在 index.php 後的路徑內容，都會被 Http server 保存在伺服器環境變數 PATH_INFO 。
PHP 可用 `$_SERVER['PATH_INFO']` 取得。

在 CI 與 CG 中，會用 PATH_INFO (`$_SERVER['PATH_INFO']`) 決定控制項、方法與參數。
我們將路徑分隔字元('/')分開的各項目稱為 segment (節)。
第一節是控制項名稱，第二節是方法名稱 (CG 還另有用法)，第三節之後的都是方法參數。

你可以把 URI 想像成命令列指令，差別在於 URI 要用 '/' 字元分隔參數。

例如: controller 是控制項名稱， say 的方法／指令， hello 是參數。

CLI: 
{{{
controller say hello
}}}

URI: 
{{{
index.php/controller/say/hello
}}}

CG 除了提供與 CI 相同的方法對應策略外，還提供 RESTful 形式的方法對應策略。
CG 首先根據客戶端送來的請求方法(REQUEST_METHOD)找尋控制項是否有對應的 get(), 
post(), put(), 或 delete() 方法。如果沒有，才根據URI路徑第二節的名稱找對應的
控制項方法。

注意，符合 RESTful 方法對應策略時，URI路徑第二節起的內容就會被視為方法參數。

舉例來說:
{{{
<php?
class Controller1 {
    function delete($id) {
        $this->db->delete($id);
    }
}
?>
}}}

以上列的 Controller1 的定義來說，下列兩個動作的結果相同，
都是呼叫 $controller1->delete('abc'); 。

a. URI是index.php/controller1/abc ，而客戶端請求方法(REQUEST_METHO)是DELETE。

根據 REQUEST_METHOD 找到 delete() 方法，URI路徑第二節變成參數$id的內容。

b. URI是index.php/controller1/delete/abc ，而客戶端請求方法(REQUEST_METHO)是GET。

由於控制項沒有定義 get() 方法，所以 CG 會以URI路徑第二節的內容 'delete' 搜尋控制
項方法，而找到 delete() 。URI路徑第三節變成參數$id的內容。


= View 與 Helper =

CI 要由控制項(controller)自行載入。 CG 則用同名自動載入策略，不提供手動載入。

舉例來說，若控制項名稱為 name1 ，則:

CI:
{{{
// 自選要用的view與helper，並可載入複數項目。
$this->load->view('global_header');  
$this->load->view('name1_body');
$this->load->view('global_footer');
$this->load->helper('name1');    
}}}

CG:
Auto load views/name1/method.* and helpers/name1.* if they are existence.

CG 著重在 RESTful 的內容回應，所以它可針對使用者的請求文件型態，決定回傳的文
件內容。

舉例來說，如果使用者送來的 GET 請求標頭中指明要 JSON 文件 (Accept: application/json)，
則 CG 會載入 views/name1/get.pjs 視圖 。

對於 HTML 文件的回應方式，它沒有提供額外的輔助方法。
對於強調視覺樣式的 HTML 頁面案例， CG 提供的支援太少。
如果你需要處理大量 HTML 頁面內容，請用 CI 。


= Config =

CI 提供 Config class ，自動載入 application/config/config.php ，並可由使用者
手動載入其他的組態內容。

CG 自動載入 config/config.php ，並用 Auto-wire 技巧注入到控制項中。

= 特殊字 = 

CG 利用 Auto-wire 技巧，由 index.php 往控制項中注入屬性內容。
其中控制項屬性名稱符合下列關鍵字者，將被自動注入內容。

  * $config
  * $request_document_type
  * $request

= Common Function =

TODO:

1. 提供一個 config_item() 。 目前是將組態內容自動注入為控制項的 $config 屬性。

2. 提供 show_error(), show_404(), log_message(), set_status_header() 函數。
   目前是用 HttpResponse 的類別方法 status() 與 exception() 。
